pipeline {
    agent any

    environment {
        // Set Python version and paths        
        PYTHON_HOME = 'C:\\Users\\91844\\AppData\\Local\\Programs\\Python\\Python312'  // Update with your Python installation path
        PATH = "${PYTHON_HOME}\\Scripts;${PYTHON_HOME};${env.PATH}"
        SONAR_SCANNER_PATH = 'C:\\Users\\91844\\Downloads\\sonar-scanner-cli-6.2.1.4610-windows-x64\\sonar-scanner-6.2.1.4610-windows-x64\\bin\\sonar-scanner.bat'
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the code from your repository
                checkout scm
            }
        }

        stage('Set Up Python Environment') {
            steps {
                script {
                    // Install necessary Python dependencies
                    bat 'pip install -r requirements.txt'  
                }
            }
        }

        stage('Run Tests with Coverage') {
            steps {
                script {
                    
                  bat 'pytest --cov=. --cov-report xml:coverage.xml'

                    
                }
            }
        }

        stage('Run SonarQube Analysis') {
            environment {
                SONAR_TOKEN = credentials('SonarQube')
            }
            steps {
                script {
                    // Assuming SonarScanner is installed and sonar-scanner is in the PATH
                    bat '''
                    %SONAR_SCANNER_PATH% ^
                    -Dsonar.projectKey=Unit-test-pipeline^
                    -Dsonar.sources=. ^
                    -Dsonar.tests=. ^
                    -Dsonar.host.url=http://localhost:9000 ^
                    -Dsonar.login=%SONAR_TOKEN% 
                    '''
                }
            }
        }
    }

    post {
        always {
            // No need to deactivate the virtual environment here
            echo 'Build completed, no need to deactivate virtual environment in Jenkins.'
        }

        success {
            echo 'Tests passed successfully!'
        }

        failure {
            echo 'Tests failed.'
        }
    }
}
